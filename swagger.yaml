swagger: '2.0'
info:
  title: Bank Argent API documentation
  description: Contains all available API endpoints in this codebase
  version: '1.0.0'
  termsOfService: 'http://swagger.io/terms/'
host: localhost:3001
basePath: /api/v1
schemes:
  - http
paths:
  /user/login:
    post:
      tags:
        - User Module
      summary: Login
      description: API for Login
      parameters:
        - in: body
          name: body
          description: Login Payload
          required: true
          schema:
            $ref: '#/definitions/Login'
      produces:
        - application/json
      responses:
        '200':
          description: Login Successfully
          schema:
            $ref: '#/definitions/LoginResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error
  /user/signup:
    post:
      tags:
        - User Module
      summary: Signup
      description: API for Signup
      parameters:
        - in: body
          name: body
          description: Signup Payload
          required: true
          schema:
            $ref: '#/definitions/User'
      produces:
        - application/json
      responses:
        '200':
          description: Signup Successfully
          schema:
            $ref: '#/definitions/ApiResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error
  /user/profile:
    post:
      security:
        - Bearer: []
      tags:
        - User Module
      summary: User Profile API
      description: API for fetching a user profile
      #produces:
       # - application/json
      responses:
        '200':
          description: User profile retrieved successully
          schema:
            $ref: '#/definitions/ApiResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error
    put:
      security:
        - Bearer: []
      tags:
        - User Module
      summary: User Profile API
      description: API for updating a user profile
      parameters:
        - in: body
          name: body
          description: Update user profile attributes
          required: true
          schema:
            $ref: '#/definitions/UserProfile'
      produces:
        - application/json
      responses:
        '200':
          description: User profile retrieved successully
          schema:
            $ref: '#/definitions/ApiResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error

  /accounts/{userId}:
    get:
      security:
        - Bearer: []
      tags:
        - Account Module
      summary: Get User Accounts
      description: API to retrieve all accounts of a specific user
      parameters:
        - in: path
          name: userId
          required: true
          description: ID of the user to retrieve accounts for
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Accounts retrieved successfully
          schema:
            $ref: "#/definitions/AccountList"
        "500":
          description: Internal Server Error
  /transactions/{accountId}:
    get:
      security:
        - Bearer: []
      tags:
        - Transaction Module
      summary: Get Account Transactions
      description: API to retrieve all transactions of a specific account
      parameters:
        - in: path
          name: accountId
          required: true
          description: ID of the account to retrieve transactions for
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Transactions retrieved successfully
          schema:
            $ref: "#/definitions/TransactionList"
        "404":
          description: Account not found
        "500":
          description: Internal Server Error
  /transaction/{transactionId}:
    get:
      security:
        - Bearer: []
      tags:
        - Transaction Module
      summary: Get Transaction Details
      description: API to retrieve details of a specific transaction
      parameters:
        - in: path
          name: transactionId
          required: true
          description: ID of the transaction to retrieve details for
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Transaction details retrieved successfully
          schema:
            $ref: "#/definitions/TransactionDetails"
        "404":
          description: Transaction not found
        "500":
          description: Internal Server Error
  /transaction/{transactionId}/note:
    post:
      security:
        - Bearer: []
      tags:
        - Transaction Module
      summary: Add Note to Transaction
      description: API to add a note to a specific transaction
      parameters:
        - in: path
          name: transactionId
          required: true
          description: ID of the transaction to add the note to
          type: string
        - in: body
          name: body
          description: Note payload
          required: true
          schema:
            $ref: "#/definitions/NotePayload"
      produces:
        - application/json
      responses:
        "200":
          description: Note added successfully
        "400":
          description: Invalid request payload
        "404":
          description: Transaction not found
        "500":
          description: Internal Server Error
    patch:
      security:
        - Bearer: []
      tags:
        - Transaction Module
      summary: Update Note of Transaction
      description: API to update the note of a specific transaction
      parameters:
        - in: path
          name: transactionId
          required: true
          description: ID of the transaction to update the note for
          type: string
        - in: body
          name: body
          description: Updated note payload
          required: true
          schema:
            $ref: "#/definitions/NotePayload"
      produces:
        - application/json
      responses:
        "200":
          description: Note updated successfully
        "400":
          description: Invalid request payload
        "404":
          description: Transaction not found
        "500":
          description: Internal Server Error
    delete:
      security:
        - Bearer: []
      tags:
        - Transaction Module
      summary: Delete Note of Transaction
      description: API to delete the note of a specific transaction
      parameters:
        - in: path
          name: transactionId
          required: true
          description: ID of the transaction to delete the note from
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Note deleted successfully
        "404":
          description: Transaction not found
        "500":
          description: Internal Server Error
  /transaction/{transactionId}/type:
    post:
      security:
        - Bearer: []
      tags:
        - Transaction Module
      summary: Add TransactionType to Transaction
      description: API to add a transactionType to a specific transaction
      parameters:
        - in: path
          name: transactionId
          required: true
          description: ID of the transaction to add the transactionType
          type: string
        - in: body
          name: body
          description: TransactionType payload
          required: true
          schema:
            $ref: "#/definitions/TypePayload"
      produces:
        - application/json
      responses:
        "200":
          description: TransactionType added successfully
        "400":
          description: Invalid request payload
        "404":
          description: Transaction not found
        "500":
          description: Internal Server Error
    patch:
      security:
        - Bearer: []
      tags:
        - Transaction Module
      summary: Update TransactionType of Transaction
      description: API to update the transactionType of a specific transaction
      parameters:
        - in: path
          name: transactionId
          required: true
          description: ID of the transaction to update the transactionType for
          type: string
        - in: body
          name: body
          description: Updated transactionType payload
          required: true
          schema:
            $ref: "#/definitions/TypePayload"
      produces:
        - application/json
      responses:
        "200":
          description: TransactionType updated successfully
        "400":
          description: Invalid request payload
        "404":
          description: Transaction not found
        "500":
          description: Internal Server Error
  /transaction/{transactionId}/category:
    get:
      security:
        - Bearer: []
      tags:
        - Transaction Module
      summary: Get all categories
      description: API to retrieve all categories
      parameters:
      - in: path
        name: transactionId
        required: true
        description: ID of the transaction to add the category
        type: string
      produces:
        - application/json
      responses:
        "200":
          description: Categories retrieved successfully
          schema:
            $ref: "#/definitions/CategoriesList"
        "500":
          description: Internal Server Error
    post:
      security:
        - Bearer: []
      tags:
        - Transaction Module
      summary: Add Category to Transaction
      description: API to add a category to a specific transaction
      parameters:
        - in: path
          name: transactionId
          required: true
          description: ID of the transaction to add the category
          type: string
        - in: body
          name: body
          description: Category payload
          required: true
          schema:
            $ref: "#/definitions/NewCategoryPayload"
      produces:
        - application/json
      responses:
        "200":
          description: Category added successfully
        "400":
          description: Invalid request payload
        "404":
          description: Transaction not found
        "500":
          description: Internal Server Error
    patch:
      security:
        - Bearer: []
      tags:
        - Transaction Module
      summary: Update Category of Transaction
      description: API to update the category of a specific transaction
      parameters:
        - in: path
          name: transactionId
          required: true
          description: ID of the transaction to update the category for
          type: string
        - in: body
          name: body
          description: Updated category payload
          required: true
          schema:
            $ref: "#/definitions/CategoryUpdatePayload"
      produces:
        - application/json
      responses:
        "200":
          description: Category updated successfully
        "400":
          description: Invalid request payload
        "404":
          description: Transaction not found
        "500":
          description: Internal Server Error

securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
definitions:
  User:
    properties:
      email:
        type: string
        description: user email
      password:
        type: string
        description: user password
      firstName:
        type: string
        description: user first name
      lastName:
        type: string
        description: user last name
      userName:
        type: string
        description: user public name
  Login:
    properties:
      email:
        type: string
        description: user email
      password:
        type: string
        description: user password
  ApiResponse:
    type: object
    properties:
      status:
        type: integer
      message:
        type: string
      body:
        type: object
        properties:
          id:
            type: string
          email:
            type: string
  LoginResponse:
    type: object
    properties:
      token:
        type: string
  UserProfile:
    type: object
    properties:
      userName:
        type: string

  # Récupération de la listes des comptes
  AccountList:
    type: array
    items:
      $ref: "#/definitions/Account"
  #Modele d'un compte
  Account:
    type: object
    properties:
      idAccount:
        type: string
        description: accountId
      nameAccount:
        type: string
        description: Name Account
      balanceAccount:
        type: number
        description: Balance Account -- currency $
  # Liste des transaction sur le compte sélectionné        
  TransactionList:
    type: array
    items:
      $ref: "#/definitions/Transaction"
  #model d'une transaction
  Transaction:
    type: object
    properties:
      idTransaction:
        type: string
        description: transactionId
      date:
        type: string
        description: date of transaction
      description:
        type: string
        description: description of transaction
      amount:
        type: string
        description: amount of transaction
      balance:
        type: string
        description: balance account after transaction
      details:
        type: object
        description: details of transaction
        items:
          $ref: "#/definitions/TransactionDetails"
  # model d'un détail de transaction
  TransactionDetails:
    type: object
    properties:
      note:
        type: string
        description: transaction note
      transactiontype:
        type: string
        description: transaction type
      category:
        type: string
        description: transaction category
  # model d'une note ajouter/modifier par l'utilisateur
  NotePayload:
    type: object
    properties:
      note:
        type: string
        description: The note to be added or updated
  TypePayload:
    type: object
    properties:
      transactionType:
        type: string
        description: The transaction type to be added or updated
  NewCategoryPayload:
    type: object
    properties:
      IdCategory:
        type: string
        description: The category to be added or updated
  CategoryUpdatePayload:
    type: object
    properties:
      IdCategory:
        type: string
        description: The category to be added or updated
      newNameCategory:
        type: string
        description: The name of category
  CategoriesList:
    type: array
    items:
      $ref: "#/definitions/Categories"
  Categories:
    type: object
    properties:
      id:
        type: string
        description: Id of category
      name:
        type: string
        description: name of category